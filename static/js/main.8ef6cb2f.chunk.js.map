{"version":3,"sources":["QuizQuestion.js","Quiz.js","FlagQuizContainer.js","App.js","serviceWorker.js","index.js"],"names":["QuizQuestion","props","optionFromLabel","optionLabel","alternatives","findIndex","element","getButtonColor","option","guessedOption","correctOption","style","margin","isFinished","questionText","image","src","alt","imageAlternative","width","map","key","onClick","guessedOptionLabel","handleGuess","backgroundColor","color","height","disabled","userResponse","Quiz","useState","guessedOptions","setGuessedOptions","currentStep","setCurrentStep","nextQuestion","questions","length","lastGuessedOption","updatedArray","setTimeout","score","forEach","question","i","calculateScore","FlagQuizContainer","state","isLoading","fetch","then","response","json","data","filteredData","filter","country","population","processInput","setState","this","numberOfQuestions","Math","floor","random","numberOfAlternatives","alternative","name","includes","push","splice","flag","className","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ef6cb2f.chunk.js","sourcesContent":["import React, { Component }  from 'react';\n//import FlagAnswer from './FlagAnswer';\n\nconst QuizQuestion = (props) => {\n\n\n    const handleGuess = (guessedOptionLabel) => {\n        return props.handleGuess(optionFromLabel(guessedOptionLabel));\n    }\n\n    const userResponse = () => {\n        if(props.guessedOption > -1) {\n            if(props.guessedOption===props.correctOption) {\n                return <h2>Correct!</h2>;\n            }else{\n                return <h2>Nice try, but no.</h2>;\n            }\n        }\n    }\n\n    const countryFrom = (option) => {\n        return props.alternatives[option];\n    }\n\n    const optionFromLabel = (optionLabel) => {\n        return props.alternatives.findIndex((element) => (element===optionLabel))\n    }\n\n    const getButtonColor = (option) => {\n        if(props.guessedOption > -1) {\n            if(option === props.correctOption) {\n                return 'green';\n            }else if(option === props.guessedOption){\n                return 'red';\n            }\n        }\n        return 'azure';\n    }\n\n        return(\n            <div style={{margin: '100px'}}>\n                {!props.isFinished && \n                    <h2>{props.questionText}</h2>\n                }\n                {props.image && \n                    <img \n                        src={props.image}\n                        alt={props.imageAlternative}\n                        width={\"500px\"}\n                    />\n                }\n                <br />\n                <div>\n                    {(props.alternatives.map( (optionLabel, option) => (\n                        <button\n                            key={optionLabel}\n                            onClick={() => handleGuess(optionLabel)}\n                            style = {{\n                                backgroundColor: getButtonColor(option),\n                                color: props.guessedOption > -1 ? 'white' : 'black',\n                                width: '120px',\n                                height: '60px',\n                                margin: '4px'\n                            }}\n                            disabled={props.guessedOption > -1}\n                        ><b>{optionLabel}</b></button>\n                    )))}\n                </div>\n                {!props.isFinished && \n                    userResponse()\n                }       \n                {/* {(props.guessedOption > -1 && !props.isFinished) &&\n                    <button\n                        onClick = { () => props.nextQuestion() }\n                    >Next</button>\n                } */}\n            </div>\n        )\n}\n\nexport default QuizQuestion;","import React, { Component, useState} from 'react';\nimport QuizQuestion from './QuizQuestion';\n\nconst Quiz = (props) => {\n    \n    const [guessedOptions, setGuessedOptions] = useState([-1]);\n    const [currentStep, setCurrentStep] = useState(0);\n\n    const handleGuess = (lastGuessedOption) => {\n      var updatedArray = currentStep<props.questions.length-1 ? [...guessedOptions, -1] : guessedOptions;\n      updatedArray[currentStep] = lastGuessedOption;\n      setGuessedOptions(updatedArray);\n      setTimeout( () => nextQuestion(), 2000)\n    }\n\n    const nextQuestion = () => {\n      if(currentStep<props.questions.length) {\n        setCurrentStep(currentStep+1)\n      }\n    }\n\n    const isFinished = () => {\n      return currentStep===props.questions.length;\n    }\n\n    const calculateScore = () => {\n      var score = 0;\n      props.questions.forEach( (question, i) => {\n        if(guessedOptions[i]===question.correctOption) {\n          score++;\n        }\n      })\n      return score;\n    }\n\n\n  \n    return (\n      <div>\n        {!isFinished() &&\n          <QuizQuestion \n            questionText      = {props.questions[currentStep].questionText}\n            image             = {props.questions[currentStep].image}\n            imageAlternative  = {props.questions[currentStep].imageAlternative}\n            alternatives      = {props.questions[currentStep].alternatives}\n            correctOption     = {props.questions[currentStep].correctOption}\n            guessedOption     = {guessedOptions[currentStep]}\n            handleGuess       = {(guessedOption) => handleGuess(guessedOption)}\n            nextQuestion      = { () => nextQuestion() }\n          />\n        }\n\n        {isFinished() &&\n          <div>\n            <h2>Good job. You got {calculateScore()}/{props.questions.length}</h2>\n            {props.questions.map( (question, i) => (\n              <QuizQuestion \n                key               = {question.image}\n                questionText      = {question.questionText}\n                image             = {question.image}\n                imageAlternative  = {question.imageAlternative}\n                alternatives      = {question.alternatives}\n                correctOption     = {question.correctOption}\n                guessedOption     = {guessedOptions[i]}\n                isFinished        = {true}\n              />\n            ))}\n          </div>\n        }\n      </div>\n    );\n  \n}\n\nexport default Quiz;\n","import React, { Component} from 'react';\nimport Quiz from './Quiz';\n\nclass FlagQuizContainer extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: [],\n            isLoading: true\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://restcountries.eu/rest/v2/all')\n        .then((response) => {\n            return response.json();\n        })\n        .then((data) => {\n            const filteredData = data.filter((country) => country.population>200000);\n            const questions = this.processInput(filteredData);\n            this.setState({\n                questions,\n                isLoading: false\n            });\n        });\n    }\n\n    processInput(data) {\n        var questions = [];\n            while(questions.length < this.props.numberOfQuestions) { \n                const i = Math.floor(Math.random()*data.length);\n                var alternatives = [];\n                while(alternatives.length+1 < this.props.numberOfAlternatives) {\n                    const alternative = data[Math.floor(Math.random()*data.length)].name;\n                    if(!alternatives.includes(alternative) && alternative!==data[i].name) {\n                        alternatives.push(alternative);\n                    }\n                }  \n                const correctOption = Math.floor(Math.random()*this.props.numberOfAlternatives);\n                alternatives.splice(correctOption, 0, data[i].name)\n                const question = {\n                    questionText: 'Guess the Flag!',\n                    image: data[i].flag,\n                    imageAlternative: \"Flag\",\n                    alternatives: alternatives,\n                    correctOption: correctOption\n                }\n                questions.push(question);\n            }\n        return questions;\n    }\n\n    handleGuess(guessedOption) {\n      this.setState((state) => ({\n        guessedOption\n      }));\n    }\n \n  render() {\n    return (\n    <div className=\"App\">\n        {this.state.isLoading &&\n            <p>... loading ...</p>}\n        {!this.state.isLoading && \n            <Quiz\n                questions={this.state.questions}\n            />\n        }\n    </div>\n    );\n  }\n}\n\nexport default FlagQuizContainer;\n","import React, { Component} from 'react';\nimport FlagQuizContainer from './FlagQuizContainer';\nimport './App.css';\n\nclass App extends Component{\n\n  render() {\n    return (\n    <div className=\"App\">\n        <FlagQuizContainer \n          numberOfQuestions = {6}\n          numberOfAlternatives = {4}\n        />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}